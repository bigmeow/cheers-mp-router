{"version":3,"file":"index.es.js","sources":["../src/adapter/wechatAdapter.ts","../src/utils/async.ts","../src/utils/query.ts","../src/index.ts"],"sourcesContent":["import { AdapterConfig } from '../index'\n\nexport default function wechatAdapter(\n  adapterconfig: AdapterConfig\n): Promise<WechatMiniprogram.GeneralCallbackResult> {\n  return new Promise((resolve, reject) => {\n    let jumpMethod: any\n    if (adapterconfig.reLaunch) {\n      jumpMethod = wx.reLaunch\n    } else if (adapterconfig.isTab) {\n      jumpMethod = wx.switchTab\n    } else if (adapterconfig.replace) {\n      jumpMethod = wx.redirectTo\n    } else {\n      jumpMethod = wx.navigateTo\n    }\n    jumpMethod.bind(wx)({\n      url: adapterconfig.path,\n      success: (res: WechatMiniprogram.GeneralCallbackResult) => {\n        resolve(res)\n      },\n      fail: (res: WechatMiniprogram.GeneralCallbackResult) => {\n        reject(res)\n      },\n    })\n  })\n}\n","import { NavigationGuard } from '../index'\r\n\r\nexport function runQueue(queue: NavigationGuard[], fn: Function, cb: Function) {\r\n  const step = (index: number) => {\r\n    if (index >= queue.length) {\r\n      cb()\r\n    } else {\r\n      if (queue[index]) {\r\n        fn(queue[index], () => {\r\n          step(index + 1)\r\n        })\r\n      } else {\r\n        step(index + 1)\r\n      }\r\n    }\r\n  }\r\n  step(0)\r\n}\r\n","const encodeReserveRE = /[!'()*]/g\r\nconst encodeReserveReplacer = (c: string) => '%' + c.charCodeAt(0).toString(16)\r\nconst commaRE = /%2C/g\r\n\r\ninterface Dictionary {\r\n  [index: string]: any\r\n}\r\n// fixed encodeURIComponent which is more conformant to RFC3986:\r\n// - escapes [!'()*]\r\n// - preserve commas\r\nconst encode = (str: string) =>\r\n  encodeURIComponent(str)\r\n    .replace(encodeReserveRE, encodeReserveReplacer)\r\n    .replace(commaRE, ',')\r\n\r\nconst decode = decodeURIComponent\r\n\r\nfunction parseQuery(query: string): Dictionary {\r\n  const res: any = {}\r\n\r\n  query = query.trim().replace(/^(\\?|#|&)/, '')\r\n\r\n  if (!query) {\r\n    return res\r\n  }\r\n\r\n  query.split('&').forEach(param => {\r\n    const parts = param.replace(/\\+/g, ' ').split('=')\r\n    const key = decode(parts.shift()!)\r\n    const val = parts.length > 0 ? decode(parts.join('=')) : null\r\n\r\n    if (res[key] === undefined) {\r\n      res[key] = val\r\n    } else if (Array.isArray(res[key])) {\r\n      res[key].push(val)\r\n    } else {\r\n      res[key] = [res[key], val]\r\n    }\r\n  })\r\n\r\n  return res\r\n}\r\n\r\n/**\r\n * 将 'k1=v1&k2=v2' 格式的字符串转换成 query 对象\r\n * @param query （可选）要转换的字符串，格式类似于 '?name=admin&password=123' 或者 'name=admin&password=123'\r\n * @param extraQuery （可选）将转换后的 query 对象 附加到此 query 对象身上\r\n * @param _parseQuery （可选）自定义转换函数\r\n */\r\nexport function resolveQuery(\r\n  query?: string,\r\n  extraQuery: Dictionary = {},\r\n  _parseQuery?: Function\r\n): Dictionary {\r\n  const parse = _parseQuery || parseQuery\r\n  let parsedQuery\r\n  try {\r\n    parsedQuery = parse(query || '')\r\n  } catch (e) {\r\n    parsedQuery = {}\r\n  }\r\n  for (const key in extraQuery) {\r\n    parsedQuery[key] = extraQuery[key]\r\n  }\r\n  return parsedQuery\r\n}\r\n\r\n/**\r\n * 将 query 对象序列化成 'k1=v1&k2=v2' 格式化的字符串\r\n * @param obj\r\n */\r\nexport function stringifyQuery(obj: Dictionary): string {\r\n  const res = obj\r\n    ? Object.keys(obj)\r\n        .map(key => {\r\n          const val = obj[key]\r\n\r\n          if (val === undefined) {\r\n            return ''\r\n          }\r\n\r\n          if (val === null) {\r\n            return encode(key)\r\n          }\r\n\r\n          if (Array.isArray(val)) {\r\n            const result: any = []\r\n            val.forEach(val2 => {\r\n              if (val2 === undefined) {\r\n                return\r\n              }\r\n              if (val2 === null) {\r\n                result.push(encode(key))\r\n              } else {\r\n                result.push(encode(key) + '=' + encode(val2))\r\n              }\r\n            })\r\n            return result.join('&')\r\n          }\r\n\r\n          return encode(key) + '=' + encode(val)\r\n        })\r\n        .filter(x => x.length > 0)\r\n        .join('&')\r\n    : null\r\n  return res ? `?${res}` : ''\r\n}\r\n","import defaultAdapter from './adapter/wechatAdapter'\nimport { runQueue } from './utils/async'\nimport { stringifyQuery, resolveQuery } from './utils/query'\n\n/**\n * Route 构造实例选项\n */\ninterface RouterOptions {\n  routes?: RouteConfig[]\n  adapter?: RouteAdapter\n}\n\n/**\n * 路由定义时的配置\n */\nexport interface RouteConfig {\n  /** 路由name,需保证唯一 */\n  name: string\n  /** 路由对应的小程序页面path(和app.json保持一致，路径不以/开头) */\n  path: string\n  /** 是否是tab页面,默认false */\n  isTab?: boolean\n  /** 携带的额外的参数 */\n  meta?: {\n    /** 访问路由需要的权限：0 表示不需要任何权限； 1 表示需要 微信授权（可以没有手机号注册）； 2表示必须要手机号注册并且使用手机号登录获得了token */\n    authType?: 0 | 1 | 2\n    [key: string]: any\n  }\n}\n\ninterface Dictionary<T> {\n  [key: string]: T\n}\n\n/**\n * 路由函数调用时的传参\n */\nexport interface Location {\n  /** 页面对应的路由名称 */\n  name: string\n  /** 传参（对tab页面无效） */\n  query?: Dictionary<string | (string | null)[] | null | undefined>\n  /** 是否使用重定向 */\n  replace?: boolean\n  /** 是否关闭所有页面，打开到应用内的某个页面 */\n  reLaunch?: boolean\n}\n\n/**\n * 路由对象\n */\nexport interface Route {\n  path: string\n  name?: string\n  query: Dictionary<string | (string | null)[]>\n  fullPath: string\n  meta?: any\n}\n\n/**\n * 导航卫士\n */\nexport type NavigationGuard = (\n  /** 即将要进入的目标 路由对象 */\n  to: Route,\n  /** 当前导航正要离开的路由 */\n  from: Route,\n  next: (to?: Location | false) => void\n) => any\n\nexport interface AdapterConfig {\n  /** 带参数的小程序完整路径 */\n  path: string\n  /** 是否是 tab 页面 */\n  isTab: boolean\n  /** 是否使用重定向 */\n  replace?: boolean\n  /** 是否关闭所有页面，打开到应用内的某个页面 */\n  reLaunch?: boolean\n}\n/**\n * 路由适配器\n */\nexport interface RouteAdapter {\n  (config: AdapterConfig): Promise<any>\n}\n\n/**\n * 后置导航卫士\n */\nexport declare type AfterNavigationHook = (to: Route, from: Route) => any\n\n/**\n * 生成路由对象\n * @param routeConfig\n * @param query\n */\nfunction generateRoute(routeConfig: RouteConfig, query: any) {\n  const route: Route = {\n    name: routeConfig.name,\n    path: routeConfig.path,\n    fullPath: routeConfig.path + stringifyQuery(query),\n    query: Object.assign({}, query),\n    meta: routeConfig.meta || {},\n  }\n  return route\n}\n\nfunction registerHook(list: any[], fn: Function): Function {\n  list.push(fn)\n  return () => {\n    const i = list.indexOf(fn)\n    if (i > -1) list.splice(i, 1)\n  }\n}\n\nexport default class Router {\n  /** 所有页面的路由配置 */\n  private routeConfigList: RouteConfig[] = []\n\n  /** 全局前置守卫钩子 */\n  private beforeHooks: NavigationGuard[]\n\n  /** 全局后置钩子 */\n  private afterHooks: AfterNavigationHook[]\n\n  /** 当前路由堆栈数量 */\n  private stackLength: number\n\n  /** 路由适配器，负责具体的路由跳转行为 */\n  private adapter: RouteAdapter = defaultAdapter\n\n  /** 路由栈上限数 */\n  public static MAX_STACK_LENGTH = 10\n\n  /** 将 query 对象序列化成 'k1=v1&k2=v2' 格式化的字符串 */\n  public static stringifyQuery = stringifyQuery\n\n  /** 将 'k1=v1&k2=v2' 格式的字符串转换成 query 对象 */\n  public static resolveQuery = resolveQuery\n\n  constructor(options: RouterOptions = {}) {\n    if (options.routes) {\n      // 统一替换处理，不以/前缀开头\n      options.routes.forEach((route) => route.path.replace(/^\\//, ''))\n      this.routeConfigList = options.routes\n    }\n    if (options.adapter) {\n      this.adapter = options.adapter\n    }\n    this.beforeHooks = []\n    this.afterHooks = []\n    this.stackLength = 0\n  }\n\n  /**\n   * 注册路由前置守卫钩子\n   * @param hook 钩子函数\n   */\n  beforeEach(hook: NavigationGuard): Function {\n    return registerHook(this.beforeHooks, hook)\n  }\n\n  /**\n   * 注册路由后置守卫钩子\n   * @param hook 钩子函数\n   */\n  afterEach(hook: AfterNavigationHook): Function {\n    return registerHook(this.afterHooks, hook)\n  }\n\n  private switchRoute(location: Location): Promise<any> {\n    return new Promise(async (resolve, reject) => {\n      let routeConfig = this.routeConfigList.find((item) => item.name === location.name)\n      if (!routeConfig) {\n        reject(new Error('未找到该路由:' + location.name))\n        return\n      }\n      const currentRoute = this.getCurrentRoute()\n      const toRoute = generateRoute(routeConfig, location.query)\n      if (\n        !location.replace &&\n        !location.reLaunch &&\n        !routeConfig.isTab &&\n        this.stackLength >= Router.MAX_STACK_LENGTH\n      ) {\n        console.warn('超出navigateTo最大限制，改用redirectTo')\n        location.replace = true\n      }\n\n      const iterator = (hook: NavigationGuard, next: Function) => {\n        hook(toRoute, currentRoute, async (v) => {\n          if (v === false) return\n          else if (typeof v === 'object') {\n            try {\n              await this.switchRoute(v)\n            } catch (error) {\n              reject(error)\n            }\n          } else {\n            next()\n          }\n        })\n      }\n      runQueue(this.beforeHooks, iterator, async () => {\n        try {\n          const result = await this.adapter({\n            // 跳转前统一加上 \"/\" 前缀\n            path: '/' + toRoute.fullPath,\n            isTab: routeConfig!.isTab || false,\n            replace: location.replace,\n            reLaunch: location.reLaunch,\n          })\n          resolve(result)\n          this.afterHooks.forEach((hook) => {\n            hook && hook(toRoute, currentRoute)\n          })\n        } catch (error) {\n          reject(error)\n        }\n      })\n    })\n  }\n\n  /**\n   * 保留当前页面，跳转到应用内的某个页面。\n   * @param location 路由跳转参数\n   */\n  push(location: Location): Promise<WechatMiniprogram.NavigateToSuccessCallbackResult> {\n    return this.switchRoute(location)\n  }\n\n  /**\n   * 关闭当前页面，跳转到应用内的某个页面。\n   * @param location 路由跳转参数\n   */\n  replace(location: Location): Promise<WechatMiniprogram.GeneralCallbackResult> {\n    location.replace = true\n    return this.switchRoute(location)\n  }\n\n  /**\n   *  关闭当前页面，返回上一页面或多级页面\n   * @param delta 返回的页面数，如果 delta 大于现有页面数，则返回到首页。\n   */\n  back(delta = 1): Promise<WechatMiniprogram.GeneralCallbackResult> {\n    if (delta < 1) delta = 1\n    return new Promise((resolve, reject) => {\n      wx.navigateBack({\n        delta,\n        success: (res) => {\n          // const route = this.stack[targetIndex]\n          resolve(res)\n        },\n        fail: (res) => {\n          // {\"errMsg\":\"navigateBack:fail cannot navigate back at first page.\"}\n          reject(res)\n        },\n      })\n    })\n  }\n\n  /**\n   * 关闭所有页面，打开到应用内的某个页面\n   * @param location 路由跳转参数\n   */\n  reLaunch(location: Location): Promise<WechatMiniprogram.GeneralCallbackResult> {\n    location.reLaunch = true\n    return this.switchRoute(location)\n  }\n\n  /**\n   * 根据路径获取路由配置\n   * @param path 小程序路径path(不以/开头)\n   */\n  getRouteConfigByPath(path: string) {\n    if (path.indexOf('?') > -1) {\n      path = path.substring(0, path.indexOf('?'))\n    }\n    return this.routeConfigList.find((item) => item.path === path)\n  }\n\n  /**\n   * 获取当前路由\n   */\n  getCurrentRoute() {\n    let pages = getCurrentPages()\n    let currentPage = pages[pages.length - 1]\n    this.stackLength = pages.length\n    let routeConfig = this.getRouteConfigByPath(currentPage.route)\n    if (!routeConfig) throw new Error('当前页面' + currentPage.route + '对应的路由未配置')\n    return generateRoute(routeConfig, currentPage.options)\n  }\n}\n"],"names":["defaultAdapter"],"mappings":"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"}